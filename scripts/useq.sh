#!/usr/bin/env bash

PATH_GENOMES_DB=$1
PATH_QUERY_GENOME=$2
THIS_PROCESS_PID=$RANDOM

# BUILDING INDEXES FROM DATABASE GENOMES
build-db $PATH_GENOMES_DB $THIS_PROCESS_PID &
# ASKING FOR THE PID OF THE LAST PROCESS SENT BY THIS BASH SESSION
BUILD_PID=$(echo $!)
# TESTING IF PROCESS IS STILL RUNNING.
TEST_BUILD_PID=$(jobs -p | grep "^$BUILD_PID$")

# SPLITTING GENOME INTO SMALL FRAGMENTS
split-genome $PATH_QUERY_GENOME $THIS_PROCESS_PID

# WAITING FOR BOTH PROCESSESS TO FINISH
echo "[WARNING!] - Waiting for build-db & split-genome processess to finish"
while [ ! -z $TEST_BUILD_PID ];
do
	sleep 10
	TEST_BUILD_PID=$(jobs -p | grep "^$BUILD_PID$")
done
echo "[MESSAGE] - build-db & split-genome processess finished"

# THE OUTPUT FILES FROM BUILD-DB AND SPLIT-GENOME ARE HARDCODED HERE.
# NAMES OF THESE FILES ARE [] AND [] RESPECTIVELY AND THEY MUST BE IN THE
# SAME FOLDER WERE THIS SCRIPT WAS LAUNCHED.

# MAPPING WITH BOWTIE2
map build.db split-genome.${THIS_PROCESS_PID}.fas mapped.${THIS_PROCESS_PID}.sam
# MAPPING OUTPUT FILENAME WAS HARDCODED ALSO (mapped.${THIS_PROCESS_PID}.sam)

# SAM <==> BAM & SELECT THOSE UNMAPPED READS
samtools view -bS -f 4 -T $PATH_QUERY_GENOME -o mapped.${THIS_PROCESS_PID}.bam mapped.${THIS_PROCESS_PID}.sam 

# BAM <==> FASTA (NEED TO FIND THE TOOL OR TO WRITE IT)
samtools fasta --reference ${PATH_QUERY_GENOME} mapped.${THIS_PROCESS_PID}.bam > unmapped.${THIS_PROCESS_PID}.fas

# MAPPING UNMAPPED REDAS TO REFERENCE GENOME.
bowtie2 -x build.db -fU unmapped.${THIS_PROCESS_PID}.fas -S unique.${THIS_PROCESS_PID}.sam

# 

